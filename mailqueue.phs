<?php

  require_once(dirname(__FILE__) . "/../unchroot/unchroot.phs");

  require_once(dirname(__FILE__) . "/mailqueue.conf.phs");

  function mailqueue() {
    // read folder list
    $dir_handle = opendir(POSTFIX_DEFERRED);
    $files      = array();
    $folders    = array();
    if (false !== $dir_handle) {
      $dirname = false;
      do {
        $dirname = readdir($dir_handle);

        if (false !== $dirname) {
          if (("." !== $dirname) && (".." !== $dirname)) {
            if (is_dir(POSTFIX_DEFERRED . $dirname)) {
              array_push($folders, $dirname);
            } else {
              if (is_file(POSTFIX_DEFERRED . $dirname)) {
                array_push($files, $dirname);
              }
            }
          }
        }
      } while (false !== $dirname);

      closedir($dir_handle);
    }

    // handle found folders
    if (0 < count($folders)) {
      // look for files in folders
      for ($index = 0; $index < count($folders); $index++) {
        $dir_handle = opendir(POSTFIX_DEFERRED . $folders[$index]);
        if (false !== $dir_handle) {
          $dirname  = POSTFIX_DEFERRED . $folders[$index] . "/";
          $filename = false;
          do {
            $filename = readdir($dir_handle);

            if (false !== $filename) {
              if (is_file($dirname . $filename)) {
                array_push($files, $filename);
              }
            }
          } while (false !== $filename);

          closedir($dir_handle);
        }
      }
    }

    // sort the file array
    sort($files, SORT_STRING | SORT_FLAG_CASE);

    // drop privileges
    if (force_unroot(PROCESS_USER, PROCESS_GROUP)) {
      // disallow concurrency (either by timeout or by lock file)
      if (disallow_concurrency(TIMEOUT)) {
        // load last status to know which changes took place
        $old_status = array();
        if (file_exists(STATUS_PATH)) {
          $old_status = file(STATUS_PATH, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        }

        // handle found files
        $gone_count = 0;
        $new_count  = 0;
        $old_count  = 0;
        if (0 < count($files)) {
          for ($index = 0; $index < count($files); $index++) {
            // check if it is an old file
            $is_old = false;
            if (0 < count($old_status)) {
              foreach ($old_status as $old_line) {
                $is_old = ($files[$index] === $old_line);
                if ($is_old) {
                  break;
                }
              }
            }

            if ($is_old) {
              print("OLD: " . $files[$index] . "\n");

              $old_count++;
            } else {
              print("NEW: " . $files[$index] . "\n");

              $new_count++;
            }
          }
        }
        if (0 < count($old_status)) {
          for ($index = 0; $index < count($old_status); $index++) {
            // check if it is there again
            $is_gone = true;
            if (0 < count($files)) {
              foreach ($files as $file) {
                $is_gone = ($old_status[$index] !== $file);
                if (!$is_gone) {
                  break;
                }
              }
            }

            if ($is_gone) {
              print("GONE: " . $old_status[$index] . "\n");

              $gone_count++;
            }
          }
        }

        if ((0 < $new_count) || (0 < $gone_count)) {
          // write notification to file
          file_put_contents(PUSHINFO_PATH, count($files) . PUSHINFO_MESSAGE . $new_count . PUSHINFO_MESSAGE_NEW . $old_count . PUSHINFO_MESSAGE_OLD . $gone_count . PUSHINFO_MESSAGE_GONE);
        }

        // save new status for next execution
        file_put_contents(STATUS_PATH, implode(PHP_EOL, $files));

        // free lock
        allow_concurrency(TIMEOUT);
      }
    }
  }

  mailqueue();

?>
